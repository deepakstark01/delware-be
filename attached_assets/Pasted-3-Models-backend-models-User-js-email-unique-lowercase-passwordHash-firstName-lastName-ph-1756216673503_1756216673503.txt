3) Models (backend/models)
User.js:
email (unique, lowercase), passwordHash, firstName, lastName, phone, address, city, state, zip
role: 'member'|'admin' (default 'member')
membershipPlan, membershipStatus: 'active'|'expired'|'pending'|'canceled'
membershipStartAt, membershipEndAt
timestamps
PendingRegistration.js:
email, firstName, lastName, phone, address, city, state, zip
selectedPlan, priceCents, currency='USD'
paypalOrderId (unique, sparse), checkoutSessionStatus
paymentStatus, userId (ObjectId), expiresAt (TTL 48h), timestamps
TTL index on expiresAt.
Payment.js:
userId, pendingRegistrationId, provider='paypal'
orderId, captureId (unique), status, amountCents, currency, raw (Mixed), createdAt
Event.js:
title (required), description, location
startsAt (required), endsAt (required)
image: { data: Buffer, contentType: String, filename: String, size: Number }
createdBy, updatedBy, timestamps
4) Middlewares (backend/middlewares)
auth.js:
requireAuth (verify access JWT from Authorization: Bearer).
requireRole(role) (admin guard).
validate.js: tiny wrapper using Joi.
error.js: final error handler → { code, message, details }.
rawBody.js: export function for PayPal webhook: express.raw({ type: 'application/json', verify: (req, res, buf)=>{ req.rawBody = buf; } }).
5) Utils (backend/utils)
tokens.js: signAccess(user), signRefresh(user), verify(token, secret).
password.js: hash(password), compare(password, hash) using bcryptjs.
email.js: stub with nodemailer console transport (send welcome/reset).
pick.js: small helper to whitelist fields.
6) Services (backend/services)
auth.service.js: create tokens, sanitize user output.
paypal.service.js:
createOrder(pending) using Orders API (intent CAPTURE).
verifyWebhook(headers, rawBody) using PayPal SDK + PAYPAL_WEBHOOK_ID.
7) Controllers (backend/controllers)
Auth
registerIntent(req,res):
Validate body { email, firstName, lastName, phone?, address?, city?, state?, zip?, plan }
Set priceCents from pricing table (server source of truth)
Create PendingRegistration { paymentStatus:'initiated' }
Return { pendingRegistrationId }
login(req,res): email/password → bcrypt compare → access+refresh → sanitized user.
refresh(req,res) and logout(req,res) (refresh token rotation optional simple version).
me(req,res): return current user.
updateMe(req,res): allow basic profile updates only.
PayPal
createOrder(req,res):
Body { pendingRegistrationId } → load pending → create order via PayPal → save paypalOrderId → return { id, approveUrl }.
webhook(req,res):
Use raw body & headers to verify.
Handle PAYMENT.CAPTURE.COMPLETED:
Extract orderId, captureId, amount, currency.
Find PendingRegistration by paypalOrderId.
Check amount == priceCents/100 and currency matches.
Idempotency: if Payment with captureId exists → 200 and exit.
Create Payment document with raw payload.
If user doesn’t exist:
Create User from pending; set membershipStatus:'active', plan, start now, end +1 year.
Generate random temp password and email a set-password link (stub ok).
Mark pending paymentStatus:'completed'.
Respond 200 quickly.
Admin – Users
listUsers, getUser, createUser (hash password), updateUser (including role), resetPassword, deleteUser, expireUser.
Admin – Events (use multer memory)
listEvents, getEvent, createEvent, updateEvent, deleteEvent
If req.file exists, store { data: buffer, contentType, filename, size }.
Public fetch image controller: getEventImage → set headers and send Buffer.
8) Routes (backend/routes)
auth.routes.js
POST /register-intent
POST /login
POST /refresh
POST /logout
GET /me (auth)
PUT /me (auth)
paypal.routes.js
POST /create-order
POST /webhook (use express.raw with rawBody only on this route)
admin.users.routes.js (auth + admin)
GET / list
GET /:id
POST /
PATCH /:id
PATCH /:id/password
POST /:id/expire
DELETE /:id
admin.events.routes.js (auth + admin)
GET /
GET /:id
GET /:id/image (public optional, or admin)
POST / (multer memoryStorage single image)
PATCH /:id (multer memoryStorage single image)
DELETE /:id
